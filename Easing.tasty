contain system math.h;

fn Linear(p: float) -> float {
	return p;
}

fn QuadraticEaseIn(p: float) -> float {
	return p * p;
}

fn QuadraticEaseOut(p: float) -> float {
	return -(p * (p - 2));
}

fn QuadraticEaseInOut(p: float) -> float {
	if p < 0.5 {
		return 2 * p * p;
	} else {
		return (-2 * p * p) + (4 * p) - 1;
	}
}

fn CubicEaseIn(p: float) -> float {
	return p * p * p;
}

fn CubicEaseOut(p: float) -> float {
	let f = (p - 1);
	return f * f * f + 1;
}

fn CubicEaseInOut(p: float) -> float {
	if p < 0.5 {
		return 4 * p * p * p;
	} else {
		let f = ((2 * p) - 2);
		return 0.5 * f * f * f + 1;
	}
}

fn QuarticEaseIn(p: float) -> float {
	return p * p * p * p;
}

fn QuarticEaseOut(p: float) -> float {
	let f = (p - 1);
	return f * f * f * (1 - p) + 1;
}

fn QuarticEaseInOut(p: float)  -> float {
	if p < 0.5 {
		return 8 * p * p * p * p;
	} else {
		let f = (p - 1);
		return -8 * f * f * f * f + 1;
	}
}

fn QuinticEaseIn(p: float)  -> float {
	return p * p * p * p * p;
}

fn QuinticEaseOut(p: float)  -> float {
	let f = (p - 1);
	return f * f * f * f * f + 1;
}

fn QuinticEaseInOut(p: float)  -> float {
	if p < 0.5 {
		return 16 * p * p * p * p * p;
	} else {
		let f = ((2 * p) - 2);
		return  0.5 * f * f * f * f * f + 1;
	}
}

fn SineEaseIn(p: float) -> float {
	return sin((p - 1) * M_PI_2) + 1;
}

fn SineEaseOut(p: float) -> float {
	return sin(p * M_PI_2);
}

fn SineEaseInOut(p: float) -> float {
	return 0.5 * (1 - cos(p * M_PI));
}

fn CircularEaseIn(p: float) -> float {
	return 1 - sqrt(1 - (p * p));
}

fn CircularEaseOut(p: float) -> float {
	return sqrt((2 - p) * p);
}

fn CircularEaseInOut(p: float) -> float {
	if p < 0.5 return 0.5 * (1 - sqrt(1 - 4 * (p * p)));
	else return 0.5 * (sqrt(-((2 * p) - 3) * ((2 * p) - 1)) + 1);
}

fn ExponentialEaseIn(p: float) -> float {
	return (p == 0.0) ? p : pow(2, 10 * (p - 1));
}

fn ExponentialEaseOut(p: float) -> float {
	return (p == 1.0) ? p : 1 - pow(2, -10 * p);
}

fn ExponentialEaseInOut(p: float) -> float {
	if p == 0.0 || p == 1.0 return p;
	if p < 0.5 return 0.5 * pow(2, (20 * p) - 10);
	else return -0.5 * pow(2, (-20 * p) + 10) + 1;
}

fn ElasticEaseIn(p: float) -> float {
	return sin(13 * M_PI_2 * p) * pow(2, 10 * (p - 1));
}

fn ElasticEaseOut(p: float) -> float {
	return sin(-13 * M_PI_2 * (p + 1)) * pow(2, -10 * p) + 1;
}

fn ElasticEaseInOut(p: float) -> float {
	if p < 0.5 {
		return 0.5 * sin(13 * M_PI_2 * (2 * p)) * pow(2, 10 * ((2 * p) - 1));
	} else {
		return 0.5 * (sin(-13 * M_PI_2 * ((2 * p - 1) + 1)) * pow(2, -10 * (2 * p - 1)) + 2);
	}
}

fn BackEaseIn(p: float) -> float {
	return p * p * p - p * sin(p * M_PI);
}

fn BackEaseOut(p: float) -> float {
	let f = (1 - p);
	return 1 - (f * f * f - f * sin(f * M_PI));
}

fn BackEaseInOut(p: float) -> float {
	if p < 0.5 {
		let f = 2 * p;
		return 0.5 * (f * f * f - f * sin(f * M_PI));
	} else {
		let f = (1 - (2 * p - 1));
		return 0.5 * (1 - (f * f * f - f * sin(f * M_PI))) + 0.5;
	}
}

fn BounceEaseIn(p: float) -> float {
	return 1 - BounceEaseOut(1 - p);
}

fn BounceEaseOut(p: float) -> float {
	if p < (4 / 11.0) return (121 * p * p) / 16.0;
	else if p < (8 / 11.0) return (363 / 40.0 * p * p) - (99 / 10.0 * p) + (17 / 5.0);
	else if p < (9 / 10.0) return (4356 / 361.0 * p * p) - (35442 / 1805.0 * p) + (16061 / 1805.0);
	else return (54 / 5.0 * p * p) - (513 / 25.0 * p) + (268 / 25.0);
}

fn BounceEaseInOut(p: float) -> float {
	if p < 0.5 return 0.5 * BounceEaseIn(p * 2);
	else return 0.5 * BounceEaseOut(p * 2 - 1) + 0.5;
}
